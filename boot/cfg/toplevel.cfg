#!/bin/bash
#以上一行是给支持语法高亮的文本编辑器看的，和 bash 无关 -_-||
#------------------------------------------------------------------------------
#
# Copyright (c) 2013, Intel Corporation
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#     * Redistributions of source code must retain the above copyright notice,
#       this list of conditions and the following disclaimer.
#     * Redistributions in binary form must reproduce the above copyright notice,
#       this list of conditions and the following disclaimer in the documentation
#       and/or other materials provided with the distribution.
#     * Neither the name of Intel Corporation nor the names of its contributors
#       may be used to endorse or promote products derived from this software
#       without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
# ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
# WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR
# ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON
# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
# SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
#------------------------------------------------------------------------------

echo "Starting BITS ..."

if [ -e /boot/cfg/init.cfg ]; then source /boot/cfg/init.cfg; fi

# U 盘的序列号，可通过 GParted 查看
# GRUB 根据序列号寻找 U 盘
UUID1="ACB3-DD28"
UUID2="373e5959-8540-4e8f-81fa-9699d9084a2d"
win7="1B9C68DF7AE3119B"
win8_1="5AD159560902F6EE"

search --no-floppy --fs-uuid --set $UUID1

# Ubuntu、Deepin、Fedora 安装盘路径
# 脚本会自动判断安装盘是否存在
Ubuntu="/isos/ubuntu-14.04-desktop-amd64.iso"
#Deepin="/isos/deepin_2014.1_amd64.iso"
Fedora="/isos/Fedora-Live-WS-x86_64-21-5.iso"
opensuse13_1="/isos/openSUSE-13.1-GNOME-Live-x86_64.iso"
opensuse13_2="/openSUSE-13.2-DVD-x86_64.iso"
cdlinux="/isos/CDlinux_CE-0.9.7.1.iso"
kali="/isos/kali-linux-1.0.9a-amd64.iso"
uefipe="/isos/uefipe.iso"
ubuntumate="/isos/ubuntu-mate-14.04.1-final-desktop-amd64.iso"
win7iso=""
CentOS7="/isos/CentOS-7-live-GNOME-x86_64.iso"
ElementaryOS="/isos/elementaryos-stable-amd64.20130810.iso"

# 加载必要模块
set pager=1
insmod all_video
insmod video_bochs
insmod video_cirrus
insmod efi_gop
insmod efi_uga
insmod ntfs
insmod ext2
insmod font
insmod part_gpt
insmod gfxterm
insmod gfxmenu
insmod gettext
insmod jpeg
insmod png
insmod part_msdos
insmod memdisk

# 设置分辨率
loadfont unicode
set gfxmode=auto

# 设置语言
#set locale_dir=$prefix/locale
set locale_dir=/boot/grub/locale
set lang=zh_CN

terminal_output gfxterm

# 设置菜单时间
set timeout_style=menu
set timeout=999

# 背景图片
# 如果没有找到 U盘的 boot 文件夹中的 grub.jpg，
# 则会用“Ubuntu 紫色”代替
#set menu_color_normal=blue/black
#set menu_color_highlight=red/black
#if background_image /EFI/grub/background.jpg; then
#    true
#else
#    if background_color 44,0,30; then
#        clear
#    fi
#fi

#主题
#loadfont ($root)/boot/grub/themes/system/DejaVuSans-10.pf2
#loadfont ($root)/boot/grub/themes/system/DejaVuSans-12.pf2
#loadfont ($root)/boot/grub/themes/system/DejaVuSans-Bold-14.pf2
loadfont ($root)/boot/grub/fonts/unicode.pf2
set theme=($root)/boot/grub/themes/starfield/theme.txt
export theme
# 从 debian 那里搞来的主题
#set theme=($root)/efi/grub/themes/debian-wheezy/theme.cfg
#export theme

# 以下是启动项列表
menuentry "EFI Shell" {
    search --no-floppy --fs-uuid --set $UUID1
    chainloader ($root)/instruments/efi_shell/bootx64.efi
}

menuentry "clover" {
	search --no-floppy --fs-uuid --set $UUID1
	chainloader ($root)/efi/clover/cloverx64.efi
}

menuentry "UEFIPE" {
    search --no-floppy --fs-uuid --set $UUID1
    linux16 /EFI/grub/memdisk iso raw
    initrd16 /isos/uefipe.iso
}

menuentry "Python" {
	python
}

menuentry '重新启动计算机' {
    reboot
}

menuentry '==============================================' {
    true
}

# Linux 发行版
menuentry 'Ubuntu' {
        #set root='(hd1,msdos1)'
        #search --no-floppy --fs-uuid --set=root --hint-bios=hd1,msdos1 --hint-efi=hd0,msdos1 $UUID1
	search --no-floppy --fs-uuid --set $UUID1
        loopback loop $Ubuntu
        linux (loop)/casper/vmlinuz.efi boot=casper iso-scan/filename=$Ubuntu ro quiet splash locale=zh_CN.UTF-8
        initrd (loop)/casper/initrd.lz
}

menuentry 'ElementaryOS' {
	search --no-floppy --fs-uuid --set $UUID1
        loopback loop $ElementaryOS
        linux (loop)/casper/vmlinuz boot=casper iso-scan/filename=$ElementaryOS ro quiet splash locale=zh_CN.UTF-8
        initrd (loop)/casper/initrd.lz
}

if [ -f "$Deepin" ]; then
    menuentry 'Deepin' {
        #search --no-floppy --fs-uuid --set=root --hint-bios=hd1,msdos1 --hint-efi=hd0,msdos1 $UUID1
        loopback loop $Deepin
        linux (loop)/casper/vmlinuz boot=casper iso-scan/filename=$Deepin ro quiet splash locale=zh_CN.UTF-8
        initrd (loop)/casper/initrd.lz
    }
fi

if [ -f "$Fedora" ]; then
    menuentry 'Fedora' {
        search --no-floppy --fs-uuid --set=root --hint-bios=hd1,msdos1 --hint-efi=hd0,msdos1 $UUID1
        loopback loop $Fedora
        linux (loop)/isolinux/vmlinuz0 iso-scan/filename=$Fedora initrd=initrd0.img root=live:CDLABEL=Fedora-Live-WS-x86_64-21-5 rootfstype=auto ro rd.live.image quiet rhgb rd.luks=0 rd.md=0 rd.dm=0
        initrd (loop)/isolinux/initrd0.img
    }
fi

#CentOS7
if [ -f "$CentOS7" ]; then
    menuentry 'CentOS7' {
        search --no-floppy --fs-uuid --set=root --hint-bios=hd1,msdos1 --hint-efi=hd0,msdos1 $UUID1
        loopback loop $CentOS7
        linux (loop)/isolinux/vmlinuz0 iso-scan/filename=$CentOS7 initrd=initrd0.img root=live:CDLABEL=CentOS-7-live-GNOME-x86_64 rootfstype=auto ro rd.live.image quiet rhgb rd.luks=0 rd.md=0 rd.dm=0
        initrd (loop)/isolinux/initrd0.img
    }
fi

#大蜥蜴
menuentry "openSUSE_13.1_GNOME_Live" {
	search --no-floppy --fs-uuid --set $UUID1
        loopback loop $opensuse13_1
        linux (loop)/boot/x86_64/loader/linux isofrom_device=/dev/disk/by-uuid/$UUID1    isofrom_system=$opensuse13_1 locale=zh_CN.UTF-8
        initrd (loop)/boot/x86_64/loader/initrd
}
menuentry "openSUSE13.2" {
	search --no-floppy --fs-uuid --set $UUID2
	loopback loop $opensuse13_2
        linux (loop)/boot/x86_64/loader/linux install=hd:$opensuse13_2  isofrom_device=/dev/disk/by-uuid/$UUID2 isofrom_system=$opensuse13_2 locale=zh_CN.UTF-8
        initrd (loop)/boot/x86_64/loader/initrd
}

menuentry "win7"{
	search --no-floppy --fs-uuid --set $win7
	chainloader /efi/boot/bootmgfw.efi
}

menuentry "win7iso"{
	search --no-floppy --fs-uuid --set $win7
	drivemap "$win7iso" '$root'
	drivemap '--hook' ''
	chainloader +1
}

menuentry "win7test"{
	search --no-floppy --fs-uuid --set $win7
	rootnoverify $root
	makeactive
	chainloader +1
}

menuentry "win8.1"{
	search --no-floppy --fs-uuid --set $win8_1
	chainloader /efi/boot/bootx64.efi
}
# Gentoo 有点问题
#menuentry 'Gentoo (test)' {
#    loopback loop /isos/Gentoo-install-amd64-minimal-20140807.iso
#    set root='(loop)'
#    linux /isolinux/gentoo root='live:CDLABEL=Gentoo Linux amd' init=/isolinux/linuxrc dokeymap looptype=squashfs loop=/image.squashfs cdroot initrd=/isolinux/gentoo.igz
#    linux /isolinux/gentoo root=/dev/loop0 init=/isolinux/linuxrc dokeymap looptype=squashfs loop=/image.squashfs cdroot initrd=/isolinux/gentoo.igz
#    Gentoo Linux amd
#}

if false; then
menuentry 'Kali test' {
    search --no-floppy --fs-uuid --set $UUID1
    loopback loop $kali
    linux (loop)/live/vmlinuz root=$UUID1 ramdisk_size=65536 devfs=mount,dall ro splash
    initrd (loop)/live/initrd.img
}
fi
menuentry "kali-linux-1.09a-amd64" {
	loopback loop $kali
	linux (loop)/live/vmlinuz findiso=$kali boot=live noconfig=sudo username=root hostname=kali noswap
	initrd (loop)/live/initrd.img
}

menuentry 'Kali (Installer)' {
    search --no-floppy --fs-uuid --set $UUID1
    loopback loop $kali
    linux (loop)/install/vmlinuz iso-scan/filename=$kali vga=788  -- quiet
    initrd (loop)/install/initrd.gz
}
if false; then
menuentry 'CDLinux' {
    #search --no-floppy --fs-uuid --set=root --hint-bios=hd1,msdos1 --hint-efi=hd0,msdos1 $UUID1
    loopback loop ($cdlinux)
    linux (loop)/CDlinux/bzImage quiet CDL_DEV=/dev/sda1 CDL_DIR=BOOT/CDlinux CDL_LANG=zh_CN.UTF-8 CDL_AMOUNT=yes
    initrd (loop)/CDlinux/initrd
}
fi
menuentry 'ubuntu-mate-14.04'{
	search --no-floppy --fs-uuid --set $UUID1
	loopback loop $ubuntumate
        linux (loop)/casper/vmlinuz.efi boot=casper iso-scan/filename=$ubuntumate ro quiet splash locale=zh_CN.UTF-8
        initrd (loop)/casper/initrd.lz
}

# EFI 安装 Windows 6.x (Windows 7/8/8.1)
# 需要事先将 Windows 安装盘 (原装) 的文件解压到 U 盘根目录，然后
# 从一个装好 Win 6.x 的电脑中找到 C:\Windows\Boot\EFI\bootmgfw.efi，
# 把它拷到 U 盘根目录。
#if [ -f "/bootmgfw.efi" ]; then
#    menuentry "EFI 启动 PE / 安装 Windows 6.x" {
        #ntldr $winbootmgr
        #search --no-floppy --fs-uuid --set=root --hint-bios=hd1,msdos1 --hint-efi=hd0,msdos1 $UUID1
#        chainloader ($win7)/bootmgfw.efi
#    }
#fi

menuentry '==============================================' {
    true
}

menuentry "Test Menu" {
  configfile /boot/cfg/test.cfg
}

menuentry "Configure Menu" {
  configfile /boot/cfg/configure.cfg
}

menuentry "Explore Menu" {
  configfile /boot/cfg/explore.cfg
}

menuentry "Python interactive interpreter" {
  python
}

menuentry "View and Save Log" {
  configfile /boot/cfg/logs.cfg
}

menuentry "$cpuname" {
    if [ $cpu != "generic" ]; then
      echo "$cpuname"
      echo "Menu entries have been tailored to target this specific processor."
    else
      echo "No processor-specific test exists!"
      echo "Menu entries will only include generic tests that apply to all processors."
    fi
    py 'from bits import pause ; pause.pause()'
}

menuentry "README: About this toolkit" {
    py 'import ttypager ; ttypager.ttypager(open("/boot/README.txt", "rU").read())'
}

menuentry "Documentation" {
    py 'import documentation ; documentation.create_documentation_cfg()'
    configfile (python)/documentation.cfg
}

menuentry "Boot an OS from disk" {
    configfile /boot/cfg/boot.cfg
}
